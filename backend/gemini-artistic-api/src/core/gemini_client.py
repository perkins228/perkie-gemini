"""Gemini API client with headshot framing prompts"""
import google.generativeai as genai
from google.generativeai import types
import base64
import time
import logging
from typing import Tuple
from io import BytesIO
from PIL import Image
from src.config import settings
from src.models.schemas import ArtisticStyle

logger = logging.getLogger(__name__)

# Configure Gemini API
genai.configure(api_key=settings.gemini_api_key)


# Headshot framing prompts for each artistic style (optimized for Gemini 2.5 Flash Image)
STYLE_PROMPTS = {
    ArtisticStyle.BW_FINE_ART: (
        "Generate a high-key black and white portrait with soft, minimalist aesthetic. "
        "Frame tightly on the pet's head, neck, and upper shoulders with face as focal point. "
        "Preserve exact breed characteristics, facial markings, and distinctive features - "
        "owner must instantly recognize their specific pet. "
        "For multiple pets touching, create group headshot; if separated but clear, group; if mixed clarity, choose clearest. "
        "Remove background completely with clean edges preserving whiskers and fine details. "
        "Focus entirely on the pet's face, highlighting fur texture and expression. "
        "Apply soft even lighting with rich tonal range maintaining exact anatomical proportions. "
        "Isolate on pure white background (#FFFFFF) with no gradients or textures."
    ),
    ArtisticStyle.INK_WASH: (
        "Create a headshot portrait in East Asian ink wash style. "
        "Frame tightly on head, neck, and upper shoulders with face as focal point. "
        "Preserve the pet's breed characteristics and facial features for recognition. "
        "For multiple pets touching, create group; if separated but clear, group; if mixed clarity, choose clearest. "
        "Remove background completely. "
        "Apply flowing ink gradients for features, spontaneous brush strokes for fur texture. "
        "Use minimal expressive lines capturing personality. "
        "Isolate on pure white background (#FFFFFF) with no gradients or textures."
    ),
    ArtisticStyle.VAN_GOGH_POST_IMPRESSIONISM: (
        "Create a Van Gogh Post-Impressionist portrait headshot. "
        "Tightly frame the pet's head, neck, and upper chest with face as focal point. "
        "For multiple pets: if touching create group; if separated but clear create group; if mixed clarity choose clearest. "
        "Remove background completely. "
        "Apply Van Gogh style with thick impasto brushstrokes, vibrant expressive colors (blues, yellows, greens, ochres), "
        "swirling patterns in fur, bold dark outlines, complementary color layers. "
        "Reference Arles period (1888-1889) technique. "
        "Isolate on pure white background (#FFFFFF)."
    ),
}


class GeminiClient:
    """Client for Gemini 2.5 Flash Image API"""

    def __init__(self):
        self.model_name = settings.gemini_model
        self.model = genai.GenerativeModel(model_name=self.model_name)
        logger.info(f"Initialized Gemini client with model: {settings.gemini_model}")

    async def generate_artistic_style(
        self,
        image_data: str,
        style: ArtisticStyle
    ) -> Tuple[str, float]:
        """
        Generate artistic portrait with headshot framing

        Args:
            image_data: Base64 encoded image
            style: Artistic style to apply

        Returns:
            Tuple of (generated_image_base64, processing_time_seconds)
        """
        start_time = time.time()

        try:
            # Decode base64 image
            if ',' in image_data:
                image_data = image_data.split(',')[1]
            image_bytes = base64.b64decode(image_data)

            # Convert to PIL Image for Gemini API
            input_image = Image.open(BytesIO(image_bytes))

            # Get style-specific prompt
            prompt = STYLE_PROMPTS[style]

            # Generate image with Gemini 2.5 Flash Image
            logger.info(f"Generating {style.value} portrait with Gemini...")
            response = self.model.generate_content(
                contents=[prompt, input_image],
                generation_config=types.GenerationConfig(
                    temperature=settings.gemini_temperature,
                    top_p=settings.gemini_top_p,
                    top_k=settings.gemini_top_k,
                )
            )

            # Extract generated image from response
            if not response.parts:
                raise ValueError("No image generated by Gemini API")

            generated_image_data = None
            for part in response.parts:
                if part.inline_data is not None:
                    generated_image_data = part.inline_data.data
                    break

            # Validate image data size
            if generated_image_data is None:
                raise ValueError("No image data in Gemini response")

            if len(generated_image_data) == 0:
                logger.error(f"CRITICAL: Gemini returned EMPTY image data for style: {style.value}")
                raise ValueError(f"Gemini returned empty (0-byte) image data for {style.value}")

            # Convert to base64
            generated_base64 = base64.b64encode(generated_image_data).decode('utf-8')

            processing_time = time.time() - start_time
            logger.info(f"Generated {style.value} in {processing_time:.2f}s")

            return generated_base64, processing_time

        except Exception as e:
            logger.error(f"Gemini API error: {e}")
            raise


# Singleton instance
gemini_client = GeminiClient()

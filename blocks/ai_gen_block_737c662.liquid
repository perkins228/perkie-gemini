{% doc %}
  @prompt
    An interactive before/after image slider. It should show 2 images overlapped that can be compared by dragging the slider.
{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-before-after-slider-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    max-width: {{ block.settings.max_width }}px;
    margin: 0 auto;
    overflow: hidden;
    border-radius: {{ block.settings.border_radius }}px;
    user-select: none;
  }

  .ai-before-after-slider-{{ ai_gen_id }}__container {
    position: relative;
    width: 100%;
    aspect-ratio: {{ block.settings.aspect_ratio }};
  }

  .ai-before-after-slider-{{ ai_gen_id }}__image-wrapper {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }

  .ai-before-after-slider-{{ ai_gen_id }}__image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
  }

  .ai-before-after-slider-{{ ai_gen_id }}__image-placeholder {
    width: 100%;
    height: 100%;
    background-color: #f4f4f4;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
  }

  .ai-before-after-slider-{{ ai_gen_id }}__image-placeholder svg {
    width: 100%;
    height: 100%;
    max-width: 300px;
    max-height: 300px;
  }

  .ai-before-after-slider-{{ ai_gen_id }}__empty-state {
    position: absolute;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    padding: 12px 20px;
    font-size: 14px;
    color: #666;
    text-align: center;
    pointer-events: none;
  }

  .ai-before-after-slider-{{ ai_gen_id }}__after-wrapper {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    overflow: hidden;
    clip-path: inset(0 0 0 0);
  }

  .ai-before-after-slider-{{ ai_gen_id }}__divider {
    position: absolute;
    top: 0;
    bottom: 0;
    width: {{ block.settings.divider_width }}px;
    background-color: {{ block.settings.divider_color }};
    cursor: ew-resize;
    transform: translateX(-50%);
    z-index: 10;
  }

  .ai-before-after-slider-{{ ai_gen_id }}__handle {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: {{ block.settings.handle_size }}px;
    height: {{ block.settings.handle_size }}px;
    background-color: {{ block.settings.handle_color }};
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
  }

  .ai-before-after-slider-{{ ai_gen_id }}__handle svg {
    width: calc({{ block.settings.handle_size }}px * 0.6);
    height: calc({{ block.settings.handle_size }}px * 0.6);
    color: {{ block.settings.handle_icon_color }};
  }

  .ai-before-after-slider-{{ ai_gen_id }}__label {
    position: absolute;
    top: {{ block.settings.label_position_vertical }}px;
    padding: 8px 16px;
    background-color: {{ block.settings.label_bg_color }};
    color: {{ block.settings.label_text_color }};
    font-size: {{ block.settings.label_font_size }}px;
    font-weight: 600;
    border-radius: {{ block.settings.label_border_radius }}px;
    z-index: 5;
    pointer-events: none;
  }

  .ai-before-after-slider-{{ ai_gen_id }}__label--before {
    left: {{ block.settings.label_position_horizontal }}px;
  }

  .ai-before-after-slider-{{ ai_gen_id }}__label--after {
    right: {{ block.settings.label_position_horizontal }}px;
  }

  @media screen and (max-width: 749px) {
    .ai-before-after-slider-{{ ai_gen_id }} {
      max-width: 100%;
    }

    .ai-before-after-slider-{{ ai_gen_id }}__label {
      font-size: calc({{ block.settings.label_font_size }}px * 0.9);
      padding: 6px 12px;
    }
  }
{% endstyle %}

<before-after-slider-{{ ai_gen_id }} class="ai-before-after-slider-{{ ai_gen_id }}" {{ block.shopify_attributes }}>
  <div class="ai-before-after-slider-{{ ai_gen_id }}__container">
    <div class="ai-before-after-slider-{{ ai_gen_id }}__image-wrapper">
      {% if block.settings.before_image %}
        <img
          src="{{ block.settings.before_image | image_url: width: 2000 }}"
          alt="{{ block.settings.before_image.alt | escape }}"
          loading="lazy"
          width="{{ block.settings.before_image.width }}"
          height="{{ block.settings.before_image.height }}"
          class="ai-before-after-slider-{{ ai_gen_id }}__image"
        >
      {% else %}
        <div class="ai-before-after-slider-{{ ai_gen_id }}__image-placeholder">
          {{ 'image' | placeholder_svg_tag }}
          <div class="ai-before-after-slider-{{ ai_gen_id }}__empty-state">
            Add a "before" image
          </div>
        </div>
      {% endif %}
    </div>

    <div class="ai-before-after-slider-{{ ai_gen_id }}__after-wrapper" data-after-wrapper>
      {% if block.settings.after_image %}
        <img
          src="{{ block.settings.after_image | image_url: width: 2000 }}"
          alt="{{ block.settings.after_image.alt | escape }}"
          loading="lazy"
          width="{{ block.settings.after_image.width }}"
          height="{{ block.settings.after_image.height }}"
          class="ai-before-after-slider-{{ ai_gen_id }}__image"
        >
      {% else %}
        <div class="ai-before-after-slider-{{ ai_gen_id }}__image-placeholder">
          {{ 'image' | placeholder_svg_tag }}
          <div class="ai-before-after-slider-{{ ai_gen_id }}__empty-state">
            Add an "after" image
          </div>
        </div>
      {% endif %}
    </div>

    {% if block.settings.show_labels %}
      {% if block.settings.before_label != blank %}
        <div class="ai-before-after-slider-{{ ai_gen_id }}__label ai-before-after-slider-{{ ai_gen_id }}__label--before">
          {{ block.settings.before_label }}
        </div>
      {% endif %}
      {% if block.settings.after_label != blank %}
        <div class="ai-before-after-slider-{{ ai_gen_id }}__label ai-before-after-slider-{{ ai_gen_id }}__label--after">
          {{ block.settings.after_label }}
        </div>
      {% endif %}
    {% endif %}

    <div class="ai-before-after-slider-{{ ai_gen_id }}__divider" data-divider>
      <div class="ai-before-after-slider-{{ ai_gen_id }}__handle">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <polyline points="15 18 9 12 15 6"></polyline>
          <polyline points="9 18 15 12 9 6"></polyline>
        </svg>
      </div>
    </div>
  </div>
</before-after-slider-{{ ai_gen_id }}>

<script>
  (function() {
    class BeforeAfterSlider{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.isDragging = false;
        this.startPosition = {{ block.settings.initial_position }};
      }

      connectedCallback() {
        this.container = this.querySelector('.ai-before-after-slider-{{ ai_gen_id }}__container');
        this.divider = this.querySelector('[data-divider]');
        this.afterWrapper = this.querySelector('[data-after-wrapper]');

        if (!this.container || !this.divider || !this.afterWrapper) return;

        this.setInitialPosition();
        this.setupEventListeners();
      }

      setInitialPosition() {
        const position = this.startPosition;
        this.updatePosition(position);
      }

      setupEventListeners() {
        this.divider.addEventListener('mousedown', this.handleStart.bind(this));
        this.divider.addEventListener('touchstart', this.handleStart.bind(this), { passive: true });

        document.addEventListener('mousemove', this.handleMove.bind(this));
        document.addEventListener('touchmove', this.handleMove.bind(this), { passive: false });

        document.addEventListener('mouseup', this.handleEnd.bind(this));
        document.addEventListener('touchend', this.handleEnd.bind(this));
      }

      handleStart(e) {
        this.isDragging = true;
        this.divider.style.transition = 'none';
        this.afterWrapper.style.transition = 'none';
      }

      handleMove(e) {
        if (!this.isDragging) return;

        e.preventDefault();

        const rect = this.container.getBoundingClientRect();
        const clientX = e.type.includes('touch') ? e.touches[0].clientX : e.clientX;
        const x = clientX - rect.left;
        const percentage = Math.max(0, Math.min(100, (x / rect.width) * 100));

        this.updatePosition(percentage);
      }

      handleEnd() {
        this.isDragging = false;
      }

      updatePosition(percentage) {
        this.divider.style.left = percentage + '%';
        this.afterWrapper.style.clipPath = `inset(0 ${100 - percentage}% 0 0)`;
      }
    }

    customElements.define('before-after-slider-{{ ai_gen_id }}', BeforeAfterSlider{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Before/after slider",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Images"
    },
    {
      "type": "image_picker",
      "id": "before_image",
      "label": "Before image"
    },
    {
      "type": "image_picker",
      "id": "after_image",
      "label": "After image"
    },
    {
      "type": "select",
      "id": "aspect_ratio",
      "label": "Aspect ratio",
      "options": [
        {
          "value": "16/9",
          "label": "16:9"
        },
        {
          "value": "4/3",
          "label": "4:3"
        },
        {
          "value": "1/1",
          "label": "1:1"
        },
        {
          "value": "3/4",
          "label": "3:4"
        }
      ],
      "default": "16/9"
    },
    {
      "type": "range",
      "id": "max_width",
      "min": 400,
      "max": 1600,
      "step": 100,
      "unit": "px",
      "label": "Maximum width",
      "default": 1200
    },
    {
      "type": "range",
      "id": "border_radius",
      "min": 0,
      "max": 40,
      "step": 2,
      "unit": "px",
      "label": "Border radius",
      "default": 0
    },
    {
      "type": "header",
      "content": "Slider"
    },
    {
      "type": "range",
      "id": "initial_position",
      "min": 0,
      "max": 100,
      "step": 5,
      "unit": "%",
      "label": "Initial position",
      "default": 50
    },
    {
      "type": "range",
      "id": "divider_width",
      "min": 1,
      "max": 6,
      "step": 1,
      "unit": "px",
      "label": "Divider width",
      "default": 3
    },
    {
      "type": "color",
      "id": "divider_color",
      "label": "Divider color",
      "default": "#ffffff"
    },
    {
      "type": "range",
      "id": "handle_size",
      "min": 30,
      "max": 80,
      "step": 5,
      "unit": "px",
      "label": "Handle size",
      "default": 50
    },
    {
      "type": "color",
      "id": "handle_color",
      "label": "Handle color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "handle_icon_color",
      "label": "Handle icon color",
      "default": "#000000"
    },
    {
      "type": "header",
      "content": "Labels"
    },
    {
      "type": "checkbox",
      "id": "show_labels",
      "label": "Show labels",
      "default": true
    },
    {
      "type": "text",
      "id": "before_label",
      "label": "Before label",
      "default": "Before"
    },
    {
      "type": "text",
      "id": "after_label",
      "label": "After label",
      "default": "After"
    },
    {
      "type": "range",
      "id": "label_font_size",
      "min": 10,
      "max": 24,
      "step": 1,
      "unit": "px",
      "label": "Font size",
      "default": 14
    },
    {
      "type": "color",
      "id": "label_bg_color",
      "label": "Background color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "label_text_color",
      "label": "Text color",
      "default": "#ffffff"
    },
    {
      "type": "range",
      "id": "label_border_radius",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Border radius",
      "default": 4
    },
    {
      "type": "range",
      "id": "label_position_horizontal",
      "min": 10,
      "max": 50,
      "step": 5,
      "unit": "px",
      "label": "Horizontal position",
      "default": 20
    },
    {
      "type": "range",
      "id": "label_position_vertical",
      "min": 10,
      "max": 50,
      "step": 5,
      "unit": "px",
      "label": "Vertical position",
      "default": 20
    }
  ],
  "presets": [
    {
      "name": "Before/after slider"
    }
  ]
}
{% endschema %}

"""Gemini API client with artistic style prompts for pet portraits"""
import google.generativeai as genai
from google.generativeai import types
import base64
import time
import logging
from typing import Tuple
from io import BytesIO
from PIL import Image
from src.config import settings
from src.models.schemas import ArtisticStyle

logger = logging.getLogger(__name__)

# Configure Gemini API
genai.configure(api_key=settings.gemini_api_key)


# Artistic style prompts optimized for Gemini 2.5 Flash Image
# These replace Pop Art (ink_wash) and Dithering (van_gogh)
STYLE_PROMPTS = {
    ArtisticStyle.INK_WASH: (
        "Create a portrait in East Asian ink wash style. "
        "Frame tightly on head, neck, and upper shoulders with face as focal point. "
        "Maintain identical facial features, fur color, and eye shape. Keep the pet's head orientation and pose consistent, ensuring that its unique markings and expression remain true to the reference. "
        "For multiple pets touching, create group; if separated but clear, group; if mixed clarity, choose clearest. "
        "Remove background completely. "
        "Apply flowing ink gradients for features, spontaneous brush strokes for fur texture. "
        "Use minimal expressive lines capturing personality. "
        "Isolate on pure white background (#FFFFFF) with no gradients or textures."
    ),
    ArtisticStyle.VAN_GOGH_POST_IMPRESSIONISM: (
        "Create a Van Gogh Post-Impressionist portrait. "
        "Tightly frame the pet's head, neck, and upper chest with face as focal point. "
        "Maintain identical facial features, fur color, and eye shape. Keep the pet's head orientation and pose consistent, ensuring that its unique markings and expression remain true to the reference. "
        "For multiple pets: if touching create group; if separated but clear create group; if mixed clarity choose clearest. "
        "Remove background completely. "
        "Apply Van Gogh style with thick impasto brushstrokes, vibrant expressive colors (blues, yellows, greens, ochres), "
        "swirling patterns in fur, bold dark outlines, complementary color layers. "
        "Reference Arles period (1888-1889) technique. "
        "Isolate on pure white background (#FFFFFF)."
    ),
}


class GeminiClient:
    """Client for Gemini 2.5 Flash Image API"""

    def __init__(self):
        self.model_name = settings.gemini_model
        self.model = genai.GenerativeModel(model_name=self.model_name)
        logger.info(f"Initialized Gemini client: {self.model_name}")

    async def generate_artistic_style(
        self,
        image_data: str,
        style: ArtisticStyle
    ) -> Tuple[str, float]:
        """
        Generate artistic portrait with headshot framing

        Args:
            image_data: Base64 encoded image
            style: Artistic style to apply (INK_WASH or VAN_GOGH_POST_IMPRESSIONISM)

        Returns:
            Tuple of (generated_image_base64, processing_time_seconds)
        """
        start_time = time.time()

        try:
            # Decode base64 image
            if ',' in image_data:
                image_data = image_data.split(',')[1]
            image_bytes = base64.b64decode(image_data)

            # Convert to PIL Image
            input_image = Image.open(BytesIO(image_bytes))

            # Get style prompt
            prompt = STYLE_PROMPTS[style]

            # Generate with Gemini
            logger.info(f"Generating {style.value}...")
            response = self.model.generate_content(
                contents=[prompt, input_image],
                generation_config=types.GenerationConfig(
                    temperature=settings.gemini_temperature,
                    top_p=settings.gemini_top_p,
                    top_k=settings.gemini_top_k,
                )
            )

            # Extract generated image
            if not response.parts:
                raise ValueError("No image generated by Gemini")

            generated_image_data = None
            for part in response.parts:
                if part.inline_data is not None:
                    generated_image_data = part.inline_data.data
                    break

            # Validate
            if generated_image_data is None or len(generated_image_data) == 0:
                raise ValueError(f"Empty image data for {style.value}")

            # Convert to base64
            generated_base64 = base64.b64encode(generated_image_data).decode('utf-8')

            processing_time = time.time() - start_time
            logger.info(f"Generated {style.value} in {processing_time:.2f}s")

            return generated_base64, processing_time

        except Exception as e:
            logger.error(f"Gemini API error: {e}")
            raise


# Singleton instance
gemini_client = GeminiClient()
